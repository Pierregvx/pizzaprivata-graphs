type Transaction @entity {
  id: ID!                  # Using trx_hash as the ID

  "The nonce of the transaction"
  nonce: String!

  "The gas price of the transaction"
  gasPrice: String

  "The gas limit of the transaction"
  gasLimit: String!

  "The recipient of the transaction"
  to: String!              # Assuming 'to' is a string in hexadecimal format

  "The value of the transaction"
  value: String

  "The input data of the transaction"
  data: String!            # Assuming 'data' is a string in hexadecimal format

  "The v part of the transaction's signature"
  v: String              # Assuming 'v' is a string in hexadecimal format

  "The r part of the transaction's signature"
  r: String              # Assuming 'r' is a string in hexadecimal format

  "The s part of the transaction's signature"
  s: String              # Assuming 's' is a string in hexadecimal format
}


type Transfer @entity {
  id: ID!                  # Using trx_hash as the ID

  "The from address of the transfer"
  from: String!

  "The to address of the transfer"
  to: String!

  "The token id of the transfer"
  tokenId: String!

  "The trx hash of the transfer"
  trxHash: String!

  "The ordinal of the transfer"
  ordinal: String!
}

type User {
  id: ID!
  name: String!
  transactions: [Transaction!]! @derivedFrom(field: "to")
  transfers: [Transfer!]! @derivedFrom(field: "to")
}